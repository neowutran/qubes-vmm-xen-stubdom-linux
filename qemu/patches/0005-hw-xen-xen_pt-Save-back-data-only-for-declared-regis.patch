From d9bcff1339f75648f8f9d24a0912dc7faaeeb5b5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Mon, 14 Nov 2022 13:40:02 +0100
Subject: [PATCH 05/21] hw/xen/xen_pt: Save back data only for declared
 registers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Call pci_default_write_config() in xen_pt_pci_write_config() only for
registers that have matching XenPTRegInfo structure, and do that only after
resolving any custom handlers. This is important for two reasons:
1. XenPTRegInfo has ro_mask which needs to be enforced - Xen-specific
   hooks do that on their own (especially xen_pt_*_reg_write()).
2. Not setting value early allows the hooks to see the old value too.

If it would be only about the first point, setting PCIDevice.wmask would
probably be sufficient, but given the second point, restructure those
writes.

Signed-off-by: Marek Marczykowski-GÃ³recki <marmarek@invisiblethingslab.com>
---
 hw/xen/xen_pt.c | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/hw/xen/xen_pt.c b/hw/xen/xen_pt.c
index 36e6f93c3..afba19cfc 100644
--- a/hw/xen/xen_pt.c
+++ b/hw/xen/xen_pt.c
@@ -242,6 +242,15 @@ exit:
     return val;
 }
 
+
+
+#define DPRINTF(fmt, ...) do { \
+    fprintf(stderr, "xen_platform: " fmt, ## __VA_ARGS__); \
+} while (0)
+
+
+
+
 static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
                                     uint32_t val, int len)
 {
@@ -255,6 +264,9 @@ static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
     uint32_t find_addr = addr;
     XenPTRegInfo *reg = NULL;
     bool wp_flag = false;
+    uint32_t emul_mask = 0, write_val;
+    DPRINTF("NEOWUTRAN: PASSE1\n");
+
 
     if (xen_pt_pci_config_access_check(d, addr, len)) {
         return;
@@ -310,7 +322,9 @@ static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
     }
 
     memory_region_transaction_begin();
-    pci_default_write_config(d, addr, val, len);
+    DPRINTF("NEOWUTRAN: PASSE2\n");
+
+    //pci_default_write_config(d, addr, val, len);
 
     /* adjust the read and write value to appropriate CFC-CFF window */
     read_val <<= (addr & 3) << 3;
@@ -370,6 +384,8 @@ static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
                 return;
             }
 
+            emul_mask |= ( (1 << (reg->size * 8) ) - 1 ) << ((find_addr & 3) * 8);
+
             /* calculate next address to find */
             emul_len -= reg->size;
             if (emul_len > 0) {
@@ -393,6 +409,29 @@ static void xen_pt_pci_write_config(PCIDevice *d, uint32_t addr,
         }
     }
 
+    /* store emulated registers after calling their handlers */
+    write_val = val;
+    DPRINTF("NEOWUTRAN: PASSE3\n");
+    for (index = 0; index < len; index += emul_len) {
+        DPRINTF("NEOWUTRAN: PASSE4: %d\n", index);
+        emul_len = 0;
+        while (emul_mask & 0xff) {
+            DPRINTF("NEOWUTRAN: PASSE5\n");
+            emul_len++;
+            emul_mask >>= 8;
+        }
+        if (emul_len) {
+            DPRINTF("NEOWUTRAN: PASSE6\n");
+            uint32_t mask = ((1 << (emul_len * 8)) - 1);
+            pci_default_write_config(d, addr + index, write_val & mask, emul_len);
+        } else {
+            DPRINTF("NEOWUTRAN: PASSE7\n");
+            emul_mask >>= 8;
+            emul_len = 1;
+        }
+        write_val >>= emul_len * 8;
+    }
+
     /* need to shift back before passing them to xen_host_pci_set_block. */
     val >>= (addr & 3) << 3;
 
-- 
2.41.0

